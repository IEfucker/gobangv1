{"version":3,"sources":["Board.js"],"names":["win","require","cc","Class","extends","Component","properties","turn","timestamp","blackChess","default","type","Prefab","whiteChess","colWidth","boardMap","onLoad","node","on","Node","EventType","TOUCH_END","dropChessByUser","bind","start","getInitBoardMap","board","i","row","j","push","getPointPos","e","convertToNodeSpaceAR","getLocation","getMapIndex","v2","x","y","getDropPos","Math","round","getChessByRole","role","game","currentRole","chess","takeTurns","hasWinnber","isPointAvailable","dropChessByInfo","Date","getTime","stepInfo","position","socket","send","updateStepInfo","info","newChess","instantiate","addChild","setPosition","updateBoardMap","winArray","console","log","hasWined","p"],"mappings":"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","file":"Board.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst win = require('./modules/win')\r\ncc.Class({\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    // 标记当前轮次，和currentRole对应，1代表黑棋，-1代表白棋\r\n    turn: 1,\r\n    // 标记操作时间戳，用于过滤\r\n    timestamp: null,\r\n    blackChess: {\r\n      default: null,\r\n      type: cc.Prefab\r\n    },\r\n    whiteChess: {\r\n      default: null,\r\n      type: cc.Prefab\r\n    },\r\n    // 素材宽535，视窗宽720，ration = 720 / 535\r\n    // ratio: 1.3458,\r\n    // 素材单元格宽35\r\n    // originColWidth: 35,\r\n    // 用于计算落子坐标\r\n    // colWidth = originColWidth * ratio\r\n    colWidth: 47.1,\r\n    boardMap: null\r\n  },\r\n\r\n  // LIFE-CYCLE CALLBACKS:\r\n\r\n  onLoad () {\r\n    // https://docs.cocos.com/creator/manual/zh/scripting/internal-events.html#%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1\r\n    // touchend默认在桌面端也会触发，方便开发调试\r\n    this.node.on(cc.Node.EventType.TOUCH_END, this.dropChessByUser.bind(this))\r\n  },\r\n\r\n  start () {\r\n    this.turn = 1\r\n    this.boardMap = this.getInitBoardMap()\r\n  },\r\n\r\n  getInitBoardMap () {\r\n    const board = []\r\n    for (let i = 0; i < 15; i++) {\r\n      const row = []\r\n      for (let j = 0; j < 15; j++) {\r\n        row.push(0)\r\n      }\r\n      board.push(row)\r\n    }\r\n    return board\r\n  },\r\n  // update (dt) {},\r\n\r\n  // 相对棋盘中心坐标，v2\r\n  getPointPos (e) {\r\n    return this.node.convertToNodeSpaceAR(e.getLocation())\r\n  },\r\n\r\n  //   return [i, j]\r\n  getMapIndex (v2) {\r\n    const colWidth = this.colWidth\r\n    let { x, y } = v2\r\n    x = x / colWidth\r\n    y = y / colWidth\r\n    // 此时x，y是相对中心点索引坐标\r\n    // 中心相对左上角坐标[7, 7]\r\n    x += 7\r\n    y = 7 - y\r\n    return [x, y]\r\n  },\r\n\r\n  // 获取落子坐标\r\n  getDropPos (v2) {\r\n    const colWidth = this.colWidth\r\n    let { x, y } = v2\r\n    x = Math.round(x / colWidth) * colWidth\r\n    y = Math.round(y / colWidth) * colWidth\r\n    // console.log(Math.round(x / colWidth), Math.round(y / colWidth))\r\n    return cc.v2(x, y)\r\n  },\r\n\r\n  // 默认使用currentRole\r\n  getChessByRole (role) {\r\n    // console.log(this.game.currentRole)\r\n    role = role || this.game.currentRole\r\n    const chess = role === 1 ? this.blackChess : this.whiteChess\r\n    return chess\r\n  },\r\n\r\n  takeTurns () {\r\n    this.turn = -this.turn\r\n  },\r\n\r\n  dropChessByUser (e) {\r\n    let v2 = this.getPointPos(e)\r\n    v2 = this.getDropPos(v2)\r\n    // 如果\r\n    // 已经产生赢家，\r\n    // 不是下棋方，\r\n    // 落子点已有棋子，\r\n    // return\r\n    if (this.game.hasWinnber() || this.turn !== this.game.currentRole || !this.isPointAvailable(v2)) return\r\n    this.dropChessByInfo(v2)\r\n\r\n    this.timestamp = new Date().getTime()\r\n    const stepInfo = {\r\n      role: this.game.currentRole,\r\n      position: v2,\r\n      timestamp: this.timestamp\r\n    }\r\n    this.game.socket.send(stepInfo)\r\n  },\r\n\r\n  updateStepInfo (info) {\r\n    // 自己发出的消息，不再更新\r\n    if (this.timestamp === info.timestamp) return\r\n    const role = info.role\r\n    const v2 = info.position\r\n    if (!this.isPointAvailable(v2)) return\r\n    this.dropChessByInfo(v2, role)\r\n  },\r\n\r\n  isPointAvailable (v2) {\r\n    const [i, j] = this.getMapIndex(v2)\r\n    if (this.boardMap[i][j] !== 0) return false\r\n    return true\r\n  },\r\n\r\n  // 画棋并跟新turn\r\n  dropChessByInfo (v2, role) {\r\n    role = role || this.game.currentRole\r\n    const chess = this.getChessByRole(role)\r\n    var newChess = cc.instantiate(chess)\r\n    this.node.addChild(newChess)\r\n    newChess.setPosition(v2)\r\n    // 更新boardMap\r\n    this.updateBoardMap(v2, role)\r\n\r\n    // 轮换\r\n    this.takeTurns()\r\n\r\n    // 验证是否赢了，返回五子坐标\r\n    const winArray = win(this.boardMap, v2, role)\r\n    if (winArray) {\r\n      console.log('win by %O and the winning array is %O', role, winArray)\r\n      this.game.hasWined(role, winArray)\r\n    }\r\n  },\r\n  updateBoardMap (v2, role) {\r\n    const p = this.getMapIndex(v2)\r\n    this.boardMap[p[0]][p[1]] = role\r\n    // console.log(this.boardMap)\r\n  }\r\n\r\n})\r\n"]}